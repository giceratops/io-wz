import com.github.weisj.darklaf.LafManager;
import com.github.weisj.darklaf.theme.DarculaTheme;
import ms.syrup.wz.io.WzDecoder;
import ms.syrup.wz.io.WzFile;
import ms.syrup.wz.viewer.Viewer;

import javax.swing.*;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.Arrays;

public class Main {

    public static void main(final String[] args) throws Throwable {
        showViewer(args[0]);

        final var zlz = WzDecoder.fromZLZ(args[0] + "/ZLZ.dll");
        final var map = new WzFile(args[0] + "/Map.wz", zlz);

        //map.get("Map/Map0/")

        decodeAndInflateCanvas(zlz);
    }

    public static void showViewer(final String folder) {
        try {
            LafManager.install(new DarculaTheme());
            final Viewer viewer = new Viewer();
            viewer.open(folder);
        } catch (final Exception io) {
            JOptionPane.showMessageDialog(null, io.getMessage());
            io.printStackTrace(System.err);
        }
    }

    public static byte[]  expected = new byte[]{
            120, -100, -76, -43, 75, 110, -38, 96, 16, 0, 96, 88, 119, -27, 28, -63, -36, 0, -85, -71, 0, -12, 113, 0, -69, 82, -42, 45, -82, -44, 109, 36, -88, -102, -20, 113, -107, 100, -35, 84, 77, -70, 15, 18, 28, 32, 105, -110, 3, -108, 38, 23, 40, 112, -125, -16, -1, 126, 63, -95, 51, -13, -37, 56, 16, -13, 72, -108, 122, 100, 97, -13, -8, 60, -98, 127, 6, -105, 74, -21, -74, 50, 91, -5, -107, 39, 108, -1, 67, 45, -77, -25, 81, -17, 43, -67, 23, 21, -13, -71, -44, -36, -87, -104, -73, 73, 126, -74, -71, -113, -58, -4, -73, -17, -97, -105, -39, 117, -108, -99, 61, -82, 22, 101, 54, -99, -50, 75, 87, -87, -124, -97, 100, -57, 18, -1, -30, 61, -82, 22, -8, 107, -108, -105, -85, -113, 55, -17, -69, -8, 75, 84, -9, 60, 113, 52, -99, 98, 5, 36, -34, 11, -97, -94, 102, 46, 101, -100, -86, -30, -99, 81, 114, 29, -115, -110, 67, 95, 92, 101, 86, 41, -74, 16, 107, 93, -111, -13, 22, 31, 37, 120, 60, -98, -32, -114, 106, -103, -119, 59, 64, 69, 51, 85, -34, -30, 109, -82, 51, -99, -75, -72, -10, -48, -99, 93, 43, 87, 23, -73, -101, 24, -59, -52, 84, -71, 110, 25, -26, 119, -69, -29, -100, 57, -57, 112, -92, 115, -67, -48, -67, -119, -123, -67, -52, 61, 9, -13, 60, 85, 110, -40, 23, 94, 63, -24, -121, -3, -32, -52, 49, 64, 109, -78, 6, -45, 88, -79, -117, 114, -90, -2, -119, 13, 95, 28, -75, 60, 82, 3, 81, 81, -116, 11, -73, -17, 15, -62, -65, -31, -79, -43, -30, 77, -72, 127, 13, 76, -95, -42, 11, -35, 110, -40, 13, -123, 59, -98, 124, -11, 13, 127, -112, -44, -19, -117, 8, -49, -121, -119, -72, 127, 48, -67, 65, 116, -105, -4, 14, 80, 20, 86, 22, 106, -111, -70, -32, 78, -89, -3, 88, 54, 69, -90, 121, -74, 109, -114, -26, -71, 39, 114, 84, 105, -49, -93, -66, -62, 45, -91, -22, 71, -9, -99, -93, -69, -65, -96, -85, 46, -29, -15, 100, 60, -111, 77, -51, -20, 7, 119, 49, -102, 42, -85, -111, 81, -93, 87, -107, -4, -91, -39, -90, 46, 102, -5, -54, -42, 93, -84, -17, 107, -5, 71, -80, -25, -99, 4, -61, 4, -5, -32, 46, -18, -5, 45, -14, -22, 76, 97, 85, 8, 25, -94, 74, -14, 106, 85, 84, -96, 19, -118, 9, -24, -123, 7, 62, -42, -12, -64, -65, -116, 42, -26, 32, 50, 76, -115, 50, 69, 79, -95, 44, -85, 76, -126, 93, 77, -41, -85, -40, -51, 123, 107, -104, 116, -61, 67, -1, 16, 76, -119, -117, 9, -64, -11, 106, -110, -92, -112, -45, 100, 45, -120, 38, 72, 50, -20, -53, 107, -112, 117, -64, 77, 60, 76, -16, -98, -81, -30, 61, -81, 36, 86, -126, 103, -77, 37, 76, 13, -68, 54, -84, 89, 29, 103, 11, -34, -111, -105, -44, 32, -17, -56, 45, 46, -101, 91, 28, 39, -75, 27, -94, -86, -79, -114, 3, 115, 4, -67, -113, -97, 106, 112, -57, 10, -27, 89, -89, 90, 40, -48, 97, -104, 109, 109, 85, 101, 103, 27, -82, -42, 109, -68, -29, -68, -79, 75, -84, 99, 55, 96, 63, 119, 53, 82, -15, 58, 77, 8, 25, 94, -37, -28, 53, -88, -54, -101, -88, 88, -115, 81, -78, -17, -19, -72, -37, 22, -72, 48, -101, -57, -106, -24, 79, 9, -14, -60, 121, -110, -88, 10, -62, -109, 104, -19, -22, 69, 115, -69, -80, 25, -2, 120, 114, -28, -17, 123, -104, -83, 102, 117, -100, 6, 23, -35, 94, -93, 10, -96, -82, 83, -107, -79, 111, -91, -76, -33, -44, -75, 42, -50, 67, 47, -36, -9, 62, -71, 47, 45, -119, 127, -74, -37, -26, -121, 116, -122, 112, -75, 116, -22, -41, 42, 77, 66, -107, -70, 64, -52, -60, 122, 117, -108, -36, 38, -104, -19, -114, -125, -82, 110, 125, 51, 119, -87, 43, 69, 23, -88, 52, 3, 50, -39, 27, -101, -92, -62, 28, 68, -32, -6, 111, 109, 116, 91, -26, 123, -74, 75, -39, -54, -44, 75, 42, 93, -95, -106, -42, 5, 43, -77, 90, 85, 44, -59, 66, 115, 60, 17, -18, 17, 76, -61, -74, 85, -127, -114, -45, -88, 79, 27, -28, 41, -77, -1, 3, 101, 35, 19, 69, 49, 99, -24, 94, 69, 24, -94, -62, -13, -49, -85, -38, 44, 86, 63, -67, -78, 44, -25, -97, 6, -71, -116, 121, -25, -111, -5, -89, -63, 105, 80, 44, -49, -18, 59, 125, 10, -30, -106, -3, 10, -97, -25, -53, 2, 69, -116, -97, 16, -117, 50, -102, 15, 35, -1, 60, -97, -23, -12, 9, -50, -14, 43, 46, -66, -1, 15, 0, 0, -1, -1
    };
    public static void decodeAndInflateCanvas(final WzDecoder decoder) {
        final var data = new byte[]{
                2, 0, 0, 0, -18, 50, 62, 3, 0, 0, 34, 123, 116, -54, -110, -102, -51, -112, 38, 46, 114, -124, -117, 15, -92, 104, -128, 25, 68, 123, -80, 86, -59, 96, 42, -52, 91, 103, 121, 48, 109, -72, 25, -78, -3, 74, 64, -105, 7, -79, -11, -20, 116, 101, 58, 24, -8, -55, 47, 88, 113, -116, 106, -31, -19, -27, -26, -82, -63, 27, -71, 81, 43, -123, 15, 28, 106, 17, -51, 16, 110, -21, 69, 109, 127, 90, 19, 15, 86, 62, -73, 90, 105, -11, -34, -61, -1, 103, -24, 122, 58, 70, -83, -108, 63, -105, -8, -6, -115, -100, 115, 127, 82, -38, -21, 105, -71, -115, 45, 118, 9, -29, 110, -121, 115, 46, -13, 9, -83, 90, -29, -85, -34, 124, -81, 66, 70, -96, -44, 125, 48, -117, 23, -74, 117, -75, 86, -26, 87, 126, -34, -5, 75, -127, 105, 47, 118, 83, 25, 116, 95, 18, 33, 80, -105, 120, 5, 26, 64, -30, -11, 114, 127, -101, -124, 18, 120, -45, 56, 18, -48, 53, 11, 103, -123, 34, -80, 68, -17, 29, 21, 31, 122, -65, -101, -10, 77, -87, -80, 117, 49, -61, 92, 38, -24, -25, 24, -59, 111, -83, -3, -69, 73, 60, 88, 119, -90, -33, -47, -39, -119, 123, 102, -94, 125, -31, -24, 8, 19, -126, 103, 93, -85, -69, 21, -55, -52, 33, -40, -17, -51, 17, -22, -57, 10, -62, -85, -128, -104, -53, 16, -61, 33, -94, -43, 122, 43, -12, 101, -29, 28, 103, 39, 115, -109, -37, -59, -53, -63, 47, 9, -103, -86, -112, 90, 83, 85, 38, -94, 93, 95, -20, 0, 5, 29, 85, 50, -56, 106, -40, 90, -12, 124, 119, 47, -3, 126, -75, 20, 86, 105, -56, 49, -5, 101, 59, 94, -17, -108, -120, 23, -70, -66, 91, 108, 113, -44, -31, 89, 37, 98, -33, 49, 75, 108, -70, -70, 24, -6, -34, 31, 124, 107, 106, -9, 29, 67, 104, 88, -99, -18, -61, 49, 43, 74, -22, 20, -115, 99, -33, -47, -74, 43, -119, 80, 92, -61, 21, 122, -123, -110, -13, 3, 35, 55, -110, 51, -124, 70, -59, 35, -38, -9, 48, 91, -25, 114, 7, -93, 104, 38, 71, 108, -106, 18, 63, 63, 32, 15, -46, -107, 47, 13, 125, -15, -27, -111, -111, 41, -53, 48, 20, 103, 35, 21, 108, 29, -11, -6, -91, 67, 109, -89, 75, -20, 48, 119, -11, -103, -122, 13, 82, 40, -12, -48, -96, -25, -7, 77, 50, -1, -10, -52, 110, 119, 120, 66, -106, 94, -4, 102, 94, -54, 23, 90, -89, 22, 95, -10, -51, -17, 45, -125, 92, 27, 12, -91, -45, 9, 18, -122, 65, -113, -93, -93, -78, 118, -8, 84, 76, 19, -99, 100, 19, -61, 41, 126, 107, -120, -49, 95, -8, -121, 31, 94, 52, -43, 85, -30, 64, 1, 53, -57, 27, -116, 70, 108, -45, -56, -68, -124, 80, -109, 39, 62, -49, -14, -74, -95, 23, -125, 94, 28, 62, 90, -72, -5, -84, 0, 76, -80, 35, 14, -125, -74, -47, 4, 120, 25, 64, 22, 40, -39, 72, 51, 91, -101, -25, 59, 61, -37, -14, -93, -109, 2, 78, -110, -61, 34, 57, 57, -50, -102, 75, -118, 91, -75, -3, 27, -72, 123, 79, 62, 61, -122, -72, 121, 16, 10, 95, -79, -56, -74, 97, 13, -61, 5, 68, -13, 86, -31, 34, 76, 88, 26, 86, 83, -101, -52, 6, 28, -95, 3, -124, 75, 13, 5, 86, 62, 97, 15, 44, 88, 85, 72, -11, 21, 81, 37, -46, -112, 95, 81, -54, 80, 42, 84, 17, 21, 9, 92, 99, -70, 60, -17, 101, -107, -75, -122, -122, 111, 108, 85, -73, 81, 89, 29, 39, -20, 121, 120, -29, -19, 94, -87, 27, 28, -39, 2, 58, 47, -115, -89, -3, 2, -40, -121, 80, -50, 64, 37, 12, 108, -40, -36, -16, 23, -48, -109, 86, 86, 113, -70, -61, -101, 126, 85, 98, -1, -72, -86, -118, 117, -17, 72, 77, -76, 125, 84, -30, -109, -72, -18, 4, -14, -80, -26, 2, -109, -90, 42, 15, -117, -77, -114, -60, 116, -108, -114, 3, 110, 29, 121, -35, -12, 24, 12, 105, 98, 51, 89, 4, -65, 64, 98, 126, -88, -32, -117, 9, 65, 106, -99, -101, -12, 68, -106, -15, -35, -71, -64, 97, -34, -13, 58, -78, -41, 125, -2, 66, 15, 122, 100, -9, 92, 103, 122, -112, 107, 74, 38, 16, -34, 62, 48, -81, 111, -45, -63, 127, 6, -87, -23, 4, 2, 46, -19, 22, -80, 44, 36, 86, 80, -122, 1, -102, -23, -68, -4, -5, 49, 79, -83, -59, -73, 97, -46, -8, 117, 13, 41, -22, 15, -60, -124, -46, 60, -51, -39, 80, -122, 31, -97, 103, 73, -82, -58, -10, -15, 47, -57, -70, -61, 44, -97, 12, 125, 31, -115, -79, -109, 23, -2, 3, 123, -124, 49, -83, -68, 99
        };


        final var output = decode(data, decoder);
        System.out.println(Arrays.equals(expected, output));
        //System.out.println(Arrays.toString(decode(data, decoder)));
    }

    // TODO add this to WzFile
    public static byte[] decode(final byte[] input, final WzDecoder decoder) {
        byte[] ret;
        ByteBuffer in = ByteBuffer.wrap(input);
        in.order(ByteOrder.LITTLE_ENDIAN);
        ByteBuffer out = ByteBuffer.allocate(input.length);

        int blockSize;
        while (in.remaining() > 0) {
            blockSize = in.getInt();
            System.out.println("block");
            if (blockSize > in.remaining() || blockSize < 0) {
                System.out.println("Critical Error - Block Size for Reading Buffer is Wrong: " + blockSize);
                break;
            }

            for (int i = 0; i < blockSize; i++) {
                out.put((byte) (in.get() ^ decoder.get(i)));
            }
        }

        ret = new byte[out.position()];

        out.rewind();

        out.get(ret);

        return ret;
    }
}
